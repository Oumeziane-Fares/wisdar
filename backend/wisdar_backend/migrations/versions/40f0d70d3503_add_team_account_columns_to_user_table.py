"""Add team account columns to user table

Revision ID: 40f0d70d3503
Revises: 
Create Date: 2025-07-07 16:44:52.530593

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '40f0d70d3503'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_assigned_models')
    op.drop_table('ai_models')
    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.alter_column('ai_model_id',
               existing_type=mysql.VARCHAR(length=100),
               comment="The specific model string used, e.g. 'gpt-4o'",
               existing_nullable=False)
        batch_op.drop_index(batch_op.f('idx_is_pinned'))
        batch_op.create_index(batch_op.f('ix_conversations_is_pinned'), ['is_pinned'], unique=False)
        batch_op.create_foreign_key(None, 'providers', ['provider_id'], ['id'])

    with op.batch_alter_table('service_costs', schema=None) as batch_op:
        batch_op.alter_column('service_name',
               existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100),
               comment="A unique identifier for the service, e.g., 'new_conversation'",
               existing_nullable=False)
        batch_op.alter_column('cost',
               existing_type=mysql.DECIMAL(precision=10, scale=4),
               type_=sa.Float(),
               comment='The number of credits to deduct for one unit of this service',
               existing_nullable=False)
        batch_op.alter_column('unit',
               existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=50),
               comment="The unit of measurement for the cost, e.g., 'per_mb', 'per_second', 'per_word', 'per_action'",
               existing_comment='e.g., per_action, per_mb, per_second, per_word',
               existing_nullable=False)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('parent_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('credit_limit', sa.Float(), nullable=True, comment='Monthly or total credit budget for a sub-account'))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=False, comment='False for pending invitations until password is set'))
        batch_op.alter_column('password_hash',
               existing_type=mysql.VARCHAR(length=256),
               type_=sa.String(length=255),
               nullable=True)
        batch_op.alter_column('role',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.String(length=20),
               comment='user, admin, or team_admin',
               existing_nullable=False)
        batch_op.alter_column('credits',
               existing_type=mysql.DECIMAL(precision=12, scale=4),
               type_=sa.Float(),
               existing_nullable=False,
               existing_server_default=sa.text("'10000.0000'"))
        batch_op.create_foreign_key(None, 'users', ['parent_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('credits',
               existing_type=sa.Float(),
               type_=mysql.DECIMAL(precision=12, scale=4),
               existing_nullable=False,
               existing_server_default=sa.text("'10000.0000'"))
        batch_op.alter_column('role',
               existing_type=sa.String(length=20),
               type_=mysql.VARCHAR(length=50),
               comment=None,
               existing_comment='user, admin, or team_admin',
               existing_nullable=False)
        batch_op.alter_column('password_hash',
               existing_type=sa.String(length=255),
               type_=mysql.VARCHAR(length=256),
               nullable=False)
        batch_op.drop_column('is_active')
        batch_op.drop_column('credit_limit')
        batch_op.drop_column('parent_id')

    with op.batch_alter_table('service_costs', schema=None) as batch_op:
        batch_op.alter_column('unit',
               existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=50),
               comment='e.g., per_action, per_mb, per_second, per_word',
               existing_comment="The unit of measurement for the cost, e.g., 'per_mb', 'per_second', 'per_word', 'per_action'",
               existing_nullable=False)
        batch_op.alter_column('cost',
               existing_type=sa.Float(),
               type_=mysql.DECIMAL(precision=10, scale=4),
               comment=None,
               existing_comment='The number of credits to deduct for one unit of this service',
               existing_nullable=False)
        batch_op.alter_column('service_name',
               existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100),
               comment=None,
               existing_comment="A unique identifier for the service, e.g., 'new_conversation'",
               existing_nullable=False)

    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_conversations_is_pinned'))
        batch_op.create_index(batch_op.f('idx_is_pinned'), ['is_pinned'], unique=False)
        batch_op.alter_column('ai_model_id',
               existing_type=mysql.VARCHAR(length=100),
               comment=None,
               existing_comment="The specific model string used, e.g. 'gpt-4o'",
               existing_nullable=False)

    op.create_table('ai_models',
    sa.Column('id', mysql.VARCHAR(length=100), nullable=False),
    sa.Column('display_name', mysql.VARCHAR(length=100), nullable=False),
    sa.Column('api_key_encrypted', mysql.TEXT(), nullable=True),
    sa.Column('is_active', mysql.TINYINT(display_width=1), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('user_assigned_models',
    sa.Column('user_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('model_id', mysql.VARCHAR(length=100), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], name=op.f('user_assigned_models_ibfk_2')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_assigned_models_ibfk_1')),
    sa.PrimaryKeyConstraint('user_id', 'model_id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    # ### end Alembic commands ###
