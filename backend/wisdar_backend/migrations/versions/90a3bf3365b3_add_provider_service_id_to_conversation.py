"""Add provider_service_id to Conversation

Revision ID: 90a3bf3365b3
Revises: a7c211eff6fe
Create Date: 2025-07-25 17:49:30.364567

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '90a3bf3365b3'
down_revision = 'a7c211eff6fe'
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Add the new column, but allow it to be NULL temporarily.
    op.add_column('conversations', sa.Column('provider_service_id', sa.Integer(), nullable=True))
    op.create_foreign_key(
        'fk_conversations_provider_service_id_provider_services', # A custom name for the constraint
        'conversations', 'provider_services',
        ['provider_service_id'], ['id']
    )

    # Step 2: Backfill the data. Execute a raw SQL UPDATE statement to populate the new column.
    # This statement joins conversations with provider_services on the three legacy columns
    # and sets the new ID based on that match.
    op.execute("""
        UPDATE conversations c
        JOIN provider_services ps ON c.provider_id = ps.provider_id
                                 AND c.service_id = ps.service_id
                                 AND c.ai_model_id = ps.model_api_id
        SET c.provider_service_id = ps.id
        WHERE c.provider_service_id IS NULL;
    """)

    # Step 3: Now that all rows are populated, alter the column to be non-nullable.
    op.alter_column('conversations', 'provider_service_id', existing_type=sa.Integer(), nullable=False)
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fk_conversations_provider_service_id_provider_services', 'conversations', type_='foreignkey')
    op.drop_column('conversations', 'provider_service_id')
    # ### end Alembic commands ###
